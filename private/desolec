#!/usr/bin/env python
# -----------------------------------------------------------------------------
# calc.py
#
# A simple calculator with variables.   This is from O'Reilly's
# "Lex and Yacc", p. 63.
# -----------------------------------------------------------------------------

import sys

if sys.version_info[0] >= 3:
    raw_input = input

tokens = (
    'NAME','NUMBER','SEMI'
    )

literals = ['=','+','-','*','/', '(',')']

# Tokens

def t_NUMBER(t):
    r'\d+'
    t.value = "{int, %s}" % t.value
    return t

def t_NAME(t):
    r'[a-zA-Z_][a-zA-Z0-9_]*'
    t.value = "{atom, %s}" % t.value
    return t

t_ignore = " \t"

t_SEMI = r';'

def t_comment(t):
    r'[#][^\n]*'
    pass

def t_newline(t):
    r'\n+'
    t.lexer.lineno += t.value.count("\n")
    return t

def t_error(t):
    print("Illegal character '%s'" % t.value[0])
    t.lexer.skip(1)

# Build the lexer
import ply.lex as lex
lexer = lex.lex(debug=1)

# Parsing rules

precedence = (
    ('left','+','-'),
    ('left','*','/'),
    ('right','UMINUS'),
    )

out = []
# dictionary of names
names = { }

def p_statement_expr(p):
    '''instruction : expression
                   | expression SEMI instruction
                   | expression SEMI'''
    out.append(p[1])

def p_statement_assign(p):
    'statement : NAME "=" expression'
    out.append("{'fun', set, [ %s, %s]}" % (p[1], p[3]))

def p_expression_binop(p):
    '''expression : expression '+' expression
                  | expression '-' expression
                  | expression '*' expression
                  | expression '/' expression'''
    if p[2] == '+'  :
        p[0] = "{'fun', add, [%s, %s]}" % (p[1], p[3])
    elif p[2] == '-':
        p[0] = "{'fun', minus, [%s, %s]}" % (p[1], p[3])
    elif p[2] == '*':
        p[0] = "{'fun', times, [%s, %s]}" % (p[1], p[3])
    elif p[2] == '/':
        p[0] = "{'fun', div, [%s, %s]}" % (p[1], p[3])

#def p_declaration(p):
    #"expression : expression SEMI"
    #print p[1]
    #out.append(p[1])
    #p[0] = None

def p_expression_uminus(p):
    "expression : '-' expression %prec UMINUS"
    p[0] = -p[2]

def p_expression_group(p):
    "expression : '(' expression ')'"
    p[0] = p[2]

def p_expression_number(p):
    "expression : NUMBER"
    p[0] = p[1]

def p_expression_name(p):
    "expression : NAME"
    p[0] = "{'fun', get, [%s]}" % p[1]

def p_error(p):
    if p:
        print("Syntax error at '%s'" % p.value)
    else:
        print("Syntax error at EOF")

import ply.yacc as yacc
yacc.yacc()

while 1:
    try:
        s = raw_input('calc > ')
    except EOFError:
        break
    if not s: continue
    yacc.parse(s)
    print "desole:run([], [desole_math, desole_stack], [%s])" % ",\n".join(out)

