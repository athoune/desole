#!/usr/bin/env python
import sys

# Great thanks to http://www.matthieuamiguet.ch/pages/compilateurs

reserved_words = (
        'if'
        )
tokens = (
    'NAME','NUMBER','SEMI', 'NEWLINE', 'STRING'
    ) + tuple(map(lambda s:s.upper(), reserved_words))

literals = ['=', '+', '-', '*', '/', '(', ')']

# Tokens

def t_STRING(t):
    r'"([\\"]|.)*"'
    t.value = '{str, <<%s>>}' % t.value
    return t
def t_NUMBER(t):
    r'\d+'
    t.value = "{int, %s}" % t.value
    return t

def t_NAME(t):
    r'[a-zA-Z_][a-zA-Z0-9_]*'
    if t.value in reserved_words:
        t.type = t.value.upper()
    return t

t_ignore = " \t\n"

t_SEMI = r';'

def t_comment(t):
    r'[#][^\n]*'
    pass

def t_newline(t):
    r'\n+'
    t.lexer.lineno += t.value.count("\n")
    return t

def t_error(t):
    print("Illegal character '%s'" % t.value[0])
    t.lexer.skip(1)

# Build the lexer
import ply.lex as lex
lexer = lex.lex(debug=0)

# Parsing rules

precedence = (
    ('left','+','-'),
    ('left','*','/'),
    ('right','UMINUS'),
    )

out = []
# dictionary of names
names = { }

#def p_expression_newline(p):
    #"expression : expression NEWLINE"
    #p[0] = p[2]

def p_statement_expr(p):
    '''instruction : expression SEMI instruction
                   | expression SEMI'''
    out.append(p[1])
    p[0] = []

def p_statement_assign(p):
    'expression : NAME "=" expression'
    p[0] = "{'fun', set, [ {atom, '%s'}, %s]}" % (p[1], p[3])

def p_expression_binop(p):
    '''expression : expression '+' expression
                  | expression '-' expression
                  | expression '*' expression
                  | expression '/' expression'''
    if p[2] == '+'  :
        p[0] = "{'fun', add, [%s, %s]}" % (p[1], p[3])
    elif p[2] == '-':
        p[0] = "{'fun', minus, [%s, %s]}" % (p[1], p[3])
    elif p[2] == '*':
        p[0] = "{'fun', times, [%s, %s]}" % (p[1], p[3])
    elif p[2] == '/':
        p[0] = "{'fun', div, [%s, %s]}" % (p[1], p[3])

def p_expression_arguments(p):
    '''arguments : expression
                 | expression ',' arguments'''
    print "arguments", p[1]
    if len(p) == 4:
        p[0] = p[1] + [p[3]]
    else:
        p[0] = [p[1]]

def p_expression_function(p):
    """expression : NAME '(' arguments ')'
                | NAME '(' ')'"""
    print "function", p[1], p[3]
    if len(p) == 3:
        p[0] = "{'fun', '%s', [] }" % p[1]
    else:
        p[0] = "{'fun', '%s', [%s] }" % (p[1], ", ".join(p[3]))

def p_expression_uminus(p):
    "expression : '-' expression %prec UMINUS"
    p[0] = -p[2]

def p_expression_group(p):
    "expression : '(' expression ')'"
    p[0] = p[2]

def p_expression_number(p):
    "expression : NUMBER"
    p[0] = p[1]

def p_expression_string(p):
    "expression : STRING"
    p[0] = p[1]

def p_expression_name(p):
    "expression : NAME"
    p[0] = "{'fun', get, [{atom, '%s'}]}" % p[1]

def p_error(p):
    if p:
        print("Syntax error at '%s'" % p.value)
    else:
        print("Syntax error at EOF")

import ply.yacc as yacc
yacc.yacc()

f = open(sys.argv[1])
s = f.read()

yacc.parse(s)
out.reverse()
print "\n\n\ndesole:run([], [desole_debug, desole_math, desole_stack], [\n%s])" % ",\n".join(out)

